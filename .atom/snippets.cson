# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.c':
  'printf':
    'prefix': 'printf'
    'body': 'printf("${1:%s}\\\\n"${2:,});$3'
  'Struct':
    'prefix': 'st'
    'body': 'typedef struct ${1:name}_ {\n\t${2:/* data */}\n}${1:name}_t;'
  'For loop':
    'prefix': 'for'
    'body': 'for (${1:int} ${2:i} = ${3:0}; ${2:i} < ${4:count}; ${5:++}${2:i}) {\n\t${6:/* code */}\n}'
  'One line if':
    'prefix': 'ifl'
    'body': 'if (${1:/* condition */}) ${2:/* single command */}'

'.source .haskell':
  'Module':
    'prefix': 'module'
    'body': 'module ${1:Name} (\n\t$2,\n) where'

'.source.shell':
  'For Each':
    'prefix': 'fore'
    'body': '''for ${1:var} in "\$\{${2:list}\[\@\]\}"
    do
      ${3:#code}
    done'''
